// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: error.proto

#ifndef PROTOBUF_error_2eproto__INCLUDED
#define PROTOBUF_error_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)

namespace grids {
namespace message {
namespace error {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_error_2eproto();
void protobuf_AssignDesc_error_2eproto();
void protobuf_ShutdownFile_error_2eproto();

class CompileError;
class KeyNotFound;
class UnsupportedSerializer;
class IncompatibleVersion;
class InvalidSerializer;
class UnknownError;
class UnknownStatus;
class Unauthorized;
class LoginInvalid;

// ===================================================================

class CompileError : public ::google::protobuf::Message {
 public:
  CompileError();
  virtual ~CompileError();
  
  CompileError(const CompileError& from);
  
  inline CompileError& operator=(const CompileError& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompileError& default_instance();
  
  void Swap(CompileError* other);
  
  // implements Message ----------------------------------------------
  
  CompileError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompileError& from);
  void MergeFrom(const CompileError& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .grids.Message base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::grids::Message& base() const;
  inline ::grids::Message* mutable_base();
  
  // optional string error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  
  // @@protoc_insertion_point(class_scope:grids.message.error.CompileError)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::grids::Message* base_;
  ::std::string* error_;
  static const ::std::string _default_error_;
  friend void  protobuf_AddDesc_error_2eproto();
  friend void protobuf_AssignDesc_error_2eproto();
  friend void protobuf_ShutdownFile_error_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CompileError* default_instance_;
};
// -------------------------------------------------------------------

class KeyNotFound : public ::google::protobuf::Message {
 public:
  KeyNotFound();
  virtual ~KeyNotFound();
  
  KeyNotFound(const KeyNotFound& from);
  
  inline KeyNotFound& operator=(const KeyNotFound& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyNotFound& default_instance();
  
  void Swap(KeyNotFound* other);
  
  // implements Message ----------------------------------------------
  
  KeyNotFound* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyNotFound& from);
  void MergeFrom(const KeyNotFound& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .grids.Message base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::grids::Message& base() const;
  inline ::grids::Message* mutable_base();
  
  // @@protoc_insertion_point(class_scope:grids.message.error.KeyNotFound)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::grids::Message* base_;
  friend void  protobuf_AddDesc_error_2eproto();
  friend void protobuf_AssignDesc_error_2eproto();
  friend void protobuf_ShutdownFile_error_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static KeyNotFound* default_instance_;
};
// -------------------------------------------------------------------

class UnsupportedSerializer : public ::google::protobuf::Message {
 public:
  UnsupportedSerializer();
  virtual ~UnsupportedSerializer();
  
  UnsupportedSerializer(const UnsupportedSerializer& from);
  
  inline UnsupportedSerializer& operator=(const UnsupportedSerializer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsupportedSerializer& default_instance();
  
  void Swap(UnsupportedSerializer* other);
  
  // implements Message ----------------------------------------------
  
  UnsupportedSerializer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnsupportedSerializer& from);
  void MergeFrom(const UnsupportedSerializer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .grids.Message base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::grids::Message& base() const;
  inline ::grids::Message* mutable_base();
  
  // optional string serializer_method = 2;
  inline bool has_serializer_method() const;
  inline void clear_serializer_method();
  static const int kSerializerMethodFieldNumber = 2;
  inline const ::std::string& serializer_method() const;
  inline void set_serializer_method(const ::std::string& value);
  inline void set_serializer_method(const char* value);
  inline void set_serializer_method(const char* value, size_t size);
  inline ::std::string* mutable_serializer_method();
  
  // @@protoc_insertion_point(class_scope:grids.message.error.UnsupportedSerializer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::grids::Message* base_;
  ::std::string* serializer_method_;
  static const ::std::string _default_serializer_method_;
  friend void  protobuf_AddDesc_error_2eproto();
  friend void protobuf_AssignDesc_error_2eproto();
  friend void protobuf_ShutdownFile_error_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UnsupportedSerializer* default_instance_;
};
// -------------------------------------------------------------------

class IncompatibleVersion : public ::google::protobuf::Message {
 public:
  IncompatibleVersion();
  virtual ~IncompatibleVersion();
  
  IncompatibleVersion(const IncompatibleVersion& from);
  
  inline IncompatibleVersion& operator=(const IncompatibleVersion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IncompatibleVersion& default_instance();
  
  void Swap(IncompatibleVersion* other);
  
  // implements Message ----------------------------------------------
  
  IncompatibleVersion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IncompatibleVersion& from);
  void MergeFrom(const IncompatibleVersion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .grids.Message base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::grids::Message& base() const;
  inline ::grids::Message* mutable_base();
  
  // optional string min_version = 2;
  inline bool has_min_version() const;
  inline void clear_min_version();
  static const int kMinVersionFieldNumber = 2;
  inline const ::std::string& min_version() const;
  inline void set_min_version(const ::std::string& value);
  inline void set_min_version(const char* value);
  inline void set_min_version(const char* value, size_t size);
  inline ::std::string* mutable_min_version();
  
  // @@protoc_insertion_point(class_scope:grids.message.error.IncompatibleVersion)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::grids::Message* base_;
  ::std::string* min_version_;
  static const ::std::string _default_min_version_;
  friend void  protobuf_AddDesc_error_2eproto();
  friend void protobuf_AssignDesc_error_2eproto();
  friend void protobuf_ShutdownFile_error_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static IncompatibleVersion* default_instance_;
};
// -------------------------------------------------------------------

class InvalidSerializer : public ::google::protobuf::Message {
 public:
  InvalidSerializer();
  virtual ~InvalidSerializer();
  
  InvalidSerializer(const InvalidSerializer& from);
  
  inline InvalidSerializer& operator=(const InvalidSerializer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InvalidSerializer& default_instance();
  
  void Swap(InvalidSerializer* other);
  
  // implements Message ----------------------------------------------
  
  InvalidSerializer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvalidSerializer& from);
  void MergeFrom(const InvalidSerializer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .grids.Message base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::grids::Message& base() const;
  inline ::grids::Message* mutable_base();
  
  // @@protoc_insertion_point(class_scope:grids.message.error.InvalidSerializer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::grids::Message* base_;
  friend void  protobuf_AddDesc_error_2eproto();
  friend void protobuf_AssignDesc_error_2eproto();
  friend void protobuf_ShutdownFile_error_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static InvalidSerializer* default_instance_;
};
// -------------------------------------------------------------------

class UnknownError : public ::google::protobuf::Message {
 public:
  UnknownError();
  virtual ~UnknownError();
  
  UnknownError(const UnknownError& from);
  
  inline UnknownError& operator=(const UnknownError& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnknownError& default_instance();
  
  void Swap(UnknownError* other);
  
  // implements Message ----------------------------------------------
  
  UnknownError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnknownError& from);
  void MergeFrom(const UnknownError& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .grids.Message base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::grids::Message& base() const;
  inline ::grids::Message* mutable_base();
  
  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // @@protoc_insertion_point(class_scope:grids.message.error.UnknownError)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::grids::Message* base_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_error_2eproto();
  friend void protobuf_AssignDesc_error_2eproto();
  friend void protobuf_ShutdownFile_error_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UnknownError* default_instance_;
};
// -------------------------------------------------------------------

class UnknownStatus : public ::google::protobuf::Message {
 public:
  UnknownStatus();
  virtual ~UnknownStatus();
  
  UnknownStatus(const UnknownStatus& from);
  
  inline UnknownStatus& operator=(const UnknownStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnknownStatus& default_instance();
  
  void Swap(UnknownStatus* other);
  
  // implements Message ----------------------------------------------
  
  UnknownStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnknownStatus& from);
  void MergeFrom(const UnknownStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .grids.Message base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::grids::Message& base() const;
  inline ::grids::Message* mutable_base();
  
  // optional string status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  
  // @@protoc_insertion_point(class_scope:grids.message.error.UnknownStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::grids::Message* base_;
  ::std::string* status_;
  static const ::std::string _default_status_;
  friend void  protobuf_AddDesc_error_2eproto();
  friend void protobuf_AssignDesc_error_2eproto();
  friend void protobuf_ShutdownFile_error_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UnknownStatus* default_instance_;
};
// -------------------------------------------------------------------

class Unauthorized : public ::google::protobuf::Message {
 public:
  Unauthorized();
  virtual ~Unauthorized();
  
  Unauthorized(const Unauthorized& from);
  
  inline Unauthorized& operator=(const Unauthorized& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Unauthorized& default_instance();
  
  void Swap(Unauthorized* other);
  
  // implements Message ----------------------------------------------
  
  Unauthorized* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Unauthorized& from);
  void MergeFrom(const Unauthorized& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .grids.Message base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::grids::Message& base() const;
  inline ::grids::Message* mutable_base();
  
  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
  // @@protoc_insertion_point(class_scope:grids.message.error.Unauthorized)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::grids::Message* base_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_error_2eproto();
  friend void protobuf_AssignDesc_error_2eproto();
  friend void protobuf_ShutdownFile_error_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Unauthorized* default_instance_;
};
// -------------------------------------------------------------------

class LoginInvalid : public ::google::protobuf::Message {
 public:
  LoginInvalid();
  virtual ~LoginInvalid();
  
  LoginInvalid(const LoginInvalid& from);
  
  inline LoginInvalid& operator=(const LoginInvalid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginInvalid& default_instance();
  
  void Swap(LoginInvalid* other);
  
  // implements Message ----------------------------------------------
  
  LoginInvalid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginInvalid& from);
  void MergeFrom(const LoginInvalid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .grids.Message base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::grids::Message& base() const;
  inline ::grids::Message* mutable_base();
  
  // @@protoc_insertion_point(class_scope:grids.message.error.LoginInvalid)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::grids::Message* base_;
  friend void  protobuf_AddDesc_error_2eproto();
  friend void protobuf_AssignDesc_error_2eproto();
  friend void protobuf_ShutdownFile_error_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LoginInvalid* default_instance_;
};
// ===================================================================


// ===================================================================

// CompileError

// required .grids.Message base = 1;
inline bool CompileError::has_base() const {
  return _has_bit(0);
}
inline void CompileError::clear_base() {
  if (base_ != NULL) base_->::grids::Message::Clear();
  _clear_bit(0);
}
inline const ::grids::Message& CompileError::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::grids::Message* CompileError::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::grids::Message;
  return base_;
}

// optional string error = 2;
inline bool CompileError::has_error() const {
  return _has_bit(1);
}
inline void CompileError::clear_error() {
  if (error_ != &_default_error_) {
    error_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CompileError::error() const {
  return *error_;
}
inline void CompileError::set_error(const ::std::string& value) {
  _set_bit(1);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void CompileError::set_error(const char* value) {
  _set_bit(1);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void CompileError::set_error(const char* value, size_t size) {
  _set_bit(1);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CompileError::mutable_error() {
  _set_bit(1);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  return error_;
}

// -------------------------------------------------------------------

// KeyNotFound

// required .grids.Message base = 1;
inline bool KeyNotFound::has_base() const {
  return _has_bit(0);
}
inline void KeyNotFound::clear_base() {
  if (base_ != NULL) base_->::grids::Message::Clear();
  _clear_bit(0);
}
inline const ::grids::Message& KeyNotFound::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::grids::Message* KeyNotFound::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::grids::Message;
  return base_;
}

// -------------------------------------------------------------------

// UnsupportedSerializer

// required .grids.Message base = 1;
inline bool UnsupportedSerializer::has_base() const {
  return _has_bit(0);
}
inline void UnsupportedSerializer::clear_base() {
  if (base_ != NULL) base_->::grids::Message::Clear();
  _clear_bit(0);
}
inline const ::grids::Message& UnsupportedSerializer::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::grids::Message* UnsupportedSerializer::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::grids::Message;
  return base_;
}

// optional string serializer_method = 2;
inline bool UnsupportedSerializer::has_serializer_method() const {
  return _has_bit(1);
}
inline void UnsupportedSerializer::clear_serializer_method() {
  if (serializer_method_ != &_default_serializer_method_) {
    serializer_method_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UnsupportedSerializer::serializer_method() const {
  return *serializer_method_;
}
inline void UnsupportedSerializer::set_serializer_method(const ::std::string& value) {
  _set_bit(1);
  if (serializer_method_ == &_default_serializer_method_) {
    serializer_method_ = new ::std::string;
  }
  serializer_method_->assign(value);
}
inline void UnsupportedSerializer::set_serializer_method(const char* value) {
  _set_bit(1);
  if (serializer_method_ == &_default_serializer_method_) {
    serializer_method_ = new ::std::string;
  }
  serializer_method_->assign(value);
}
inline void UnsupportedSerializer::set_serializer_method(const char* value, size_t size) {
  _set_bit(1);
  if (serializer_method_ == &_default_serializer_method_) {
    serializer_method_ = new ::std::string;
  }
  serializer_method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnsupportedSerializer::mutable_serializer_method() {
  _set_bit(1);
  if (serializer_method_ == &_default_serializer_method_) {
    serializer_method_ = new ::std::string;
  }
  return serializer_method_;
}

// -------------------------------------------------------------------

// IncompatibleVersion

// required .grids.Message base = 1;
inline bool IncompatibleVersion::has_base() const {
  return _has_bit(0);
}
inline void IncompatibleVersion::clear_base() {
  if (base_ != NULL) base_->::grids::Message::Clear();
  _clear_bit(0);
}
inline const ::grids::Message& IncompatibleVersion::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::grids::Message* IncompatibleVersion::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::grids::Message;
  return base_;
}

// optional string min_version = 2;
inline bool IncompatibleVersion::has_min_version() const {
  return _has_bit(1);
}
inline void IncompatibleVersion::clear_min_version() {
  if (min_version_ != &_default_min_version_) {
    min_version_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& IncompatibleVersion::min_version() const {
  return *min_version_;
}
inline void IncompatibleVersion::set_min_version(const ::std::string& value) {
  _set_bit(1);
  if (min_version_ == &_default_min_version_) {
    min_version_ = new ::std::string;
  }
  min_version_->assign(value);
}
inline void IncompatibleVersion::set_min_version(const char* value) {
  _set_bit(1);
  if (min_version_ == &_default_min_version_) {
    min_version_ = new ::std::string;
  }
  min_version_->assign(value);
}
inline void IncompatibleVersion::set_min_version(const char* value, size_t size) {
  _set_bit(1);
  if (min_version_ == &_default_min_version_) {
    min_version_ = new ::std::string;
  }
  min_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IncompatibleVersion::mutable_min_version() {
  _set_bit(1);
  if (min_version_ == &_default_min_version_) {
    min_version_ = new ::std::string;
  }
  return min_version_;
}

// -------------------------------------------------------------------

// InvalidSerializer

// required .grids.Message base = 1;
inline bool InvalidSerializer::has_base() const {
  return _has_bit(0);
}
inline void InvalidSerializer::clear_base() {
  if (base_ != NULL) base_->::grids::Message::Clear();
  _clear_bit(0);
}
inline const ::grids::Message& InvalidSerializer::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::grids::Message* InvalidSerializer::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::grids::Message;
  return base_;
}

// -------------------------------------------------------------------

// UnknownError

// required .grids.Message base = 1;
inline bool UnknownError::has_base() const {
  return _has_bit(0);
}
inline void UnknownError::clear_base() {
  if (base_ != NULL) base_->::grids::Message::Clear();
  _clear_bit(0);
}
inline const ::grids::Message& UnknownError::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::grids::Message* UnknownError::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::grids::Message;
  return base_;
}

// optional string message = 2;
inline bool UnknownError::has_message() const {
  return _has_bit(1);
}
inline void UnknownError::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UnknownError::message() const {
  return *message_;
}
inline void UnknownError::set_message(const ::std::string& value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void UnknownError::set_message(const char* value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void UnknownError::set_message(const char* value, size_t size) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnknownError::mutable_message() {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// UnknownStatus

// required .grids.Message base = 1;
inline bool UnknownStatus::has_base() const {
  return _has_bit(0);
}
inline void UnknownStatus::clear_base() {
  if (base_ != NULL) base_->::grids::Message::Clear();
  _clear_bit(0);
}
inline const ::grids::Message& UnknownStatus::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::grids::Message* UnknownStatus::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::grids::Message;
  return base_;
}

// optional string status = 2;
inline bool UnknownStatus::has_status() const {
  return _has_bit(1);
}
inline void UnknownStatus::clear_status() {
  if (status_ != &_default_status_) {
    status_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UnknownStatus::status() const {
  return *status_;
}
inline void UnknownStatus::set_status(const ::std::string& value) {
  _set_bit(1);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void UnknownStatus::set_status(const char* value) {
  _set_bit(1);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void UnknownStatus::set_status(const char* value, size_t size) {
  _set_bit(1);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnknownStatus::mutable_status() {
  _set_bit(1);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  return status_;
}

// -------------------------------------------------------------------

// Unauthorized

// required .grids.Message base = 1;
inline bool Unauthorized::has_base() const {
  return _has_bit(0);
}
inline void Unauthorized::clear_base() {
  if (base_ != NULL) base_->::grids::Message::Clear();
  _clear_bit(0);
}
inline const ::grids::Message& Unauthorized::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::grids::Message* Unauthorized::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::grids::Message;
  return base_;
}

// optional string message = 2;
inline bool Unauthorized::has_message() const {
  return _has_bit(1);
}
inline void Unauthorized::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Unauthorized::message() const {
  return *message_;
}
inline void Unauthorized::set_message(const ::std::string& value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Unauthorized::set_message(const char* value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Unauthorized::set_message(const char* value, size_t size) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Unauthorized::mutable_message() {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// LoginInvalid

// required .grids.Message base = 1;
inline bool LoginInvalid::has_base() const {
  return _has_bit(0);
}
inline void LoginInvalid::clear_base() {
  if (base_ != NULL) base_->::grids::Message::Clear();
  _clear_bit(0);
}
inline const ::grids::Message& LoginInvalid::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::grids::Message* LoginInvalid::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::grids::Message;
  return base_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace error
}  // namespace message
}  // namespace grids

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_error_2eproto__INCLUDED
