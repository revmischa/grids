// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef PROTOBUF_base_2eproto__INCLUDED
#define PROTOBUF_base_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace grids {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_base_2eproto();
void protobuf_AssignDesc_base_2eproto();
void protobuf_ShutdownFile_base_2eproto();

class Message;

// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();
  
  Message(const Message& from);
  
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();
  
  void Swap(Message* other);
  
  // implements Message ----------------------------------------------
  
  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string event = 1;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline const ::std::string& event() const;
  inline void set_event(const ::std::string& value);
  inline void set_event(const char* value);
  inline void set_event(const char* value, size_t size);
  inline ::std::string* mutable_event();
  
  // required string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  
  // optional string signed_id = 3;
  inline bool has_signed_id() const;
  inline void clear_signed_id();
  static const int kSignedIdFieldNumber = 3;
  inline const ::std::string& signed_id() const;
  inline void set_signed_id(const ::std::string& value);
  inline void set_signed_id(const char* value);
  inline void set_signed_id(const char* value, size_t size);
  inline ::std::string* mutable_signed_id();
  
  // optional string parent_id = 13;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 13;
  inline const ::std::string& parent_id() const;
  inline void set_parent_id(const ::std::string& value);
  inline void set_parent_id(const char* value);
  inline void set_parent_id(const char* value, size_t size);
  inline ::std::string* mutable_parent_id();
  
  // optional string source = 4;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  
  // optional string destination = 5;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 5;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  
  // optional uint64 timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // optional uint64 expires = 7;
  inline bool has_expires() const;
  inline void clear_expires();
  static const int kExpiresFieldNumber = 7;
  inline ::google::protobuf::uint64 expires() const;
  inline void set_expires(::google::protobuf::uint64 value);
  
  // optional bool is_success = 8;
  inline bool has_is_success() const;
  inline void clear_is_success();
  static const int kIsSuccessFieldNumber = 8;
  inline bool is_success() const;
  inline void set_is_success(bool value);
  
  // optional string error = 9;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 9;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  
  // optional bool is_broadcast = 10;
  inline bool has_is_broadcast() const;
  inline void clear_is_broadcast();
  static const int kIsBroadcastFieldNumber = 10;
  inline bool is_broadcast() const;
  inline void set_is_broadcast(bool value);
  
  // optional bool is_ack = 11;
  inline bool has_is_ack() const;
  inline void clear_is_ack();
  static const int kIsAckFieldNumber = 11;
  inline bool is_ack() const;
  inline void set_is_ack(bool value);
  
  // optional string session_token = 12;
  inline bool has_session_token() const;
  inline void clear_session_token();
  static const int kSessionTokenFieldNumber = 12;
  inline const ::std::string& session_token() const;
  inline void set_session_token(const ::std::string& value);
  inline void set_session_token(const char* value);
  inline void set_session_token(const char* value, size_t size);
  inline ::std::string* mutable_session_token();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Message)
  // @@protoc_insertion_point(class_scope:grids.Message)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* event_;
  static const ::std::string _default_event_;
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* signed_id_;
  static const ::std::string _default_signed_id_;
  ::std::string* parent_id_;
  static const ::std::string _default_parent_id_;
  ::std::string* source_;
  static const ::std::string _default_source_;
  ::std::string* destination_;
  static const ::std::string _default_destination_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 expires_;
  bool is_success_;
  ::std::string* error_;
  static const ::std::string _default_error_;
  bool is_broadcast_;
  bool is_ack_;
  ::std::string* session_token_;
  static const ::std::string _default_session_token_;
  friend void  protobuf_AddDesc_base_2eproto();
  friend void protobuf_AssignDesc_base_2eproto();
  friend void protobuf_ShutdownFile_base_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// optional string event = 1;
inline bool Message::has_event() const {
  return _has_bit(0);
}
inline void Message::clear_event() {
  if (event_ != &_default_event_) {
    event_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Message::event() const {
  return *event_;
}
inline void Message::set_event(const ::std::string& value) {
  _set_bit(0);
  if (event_ == &_default_event_) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void Message::set_event(const char* value) {
  _set_bit(0);
  if (event_ == &_default_event_) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void Message::set_event(const char* value, size_t size) {
  _set_bit(0);
  if (event_ == &_default_event_) {
    event_ = new ::std::string;
  }
  event_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_event() {
  _set_bit(0);
  if (event_ == &_default_event_) {
    event_ = new ::std::string;
  }
  return event_;
}

// required string id = 2;
inline bool Message::has_id() const {
  return _has_bit(1);
}
inline void Message::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Message::id() const {
  return *id_;
}
inline void Message::set_id(const ::std::string& value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Message::set_id(const char* value) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Message::set_id(const char* value, size_t size) {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_id() {
  _set_bit(1);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// optional string signed_id = 3;
inline bool Message::has_signed_id() const {
  return _has_bit(2);
}
inline void Message::clear_signed_id() {
  if (signed_id_ != &_default_signed_id_) {
    signed_id_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Message::signed_id() const {
  return *signed_id_;
}
inline void Message::set_signed_id(const ::std::string& value) {
  _set_bit(2);
  if (signed_id_ == &_default_signed_id_) {
    signed_id_ = new ::std::string;
  }
  signed_id_->assign(value);
}
inline void Message::set_signed_id(const char* value) {
  _set_bit(2);
  if (signed_id_ == &_default_signed_id_) {
    signed_id_ = new ::std::string;
  }
  signed_id_->assign(value);
}
inline void Message::set_signed_id(const char* value, size_t size) {
  _set_bit(2);
  if (signed_id_ == &_default_signed_id_) {
    signed_id_ = new ::std::string;
  }
  signed_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_signed_id() {
  _set_bit(2);
  if (signed_id_ == &_default_signed_id_) {
    signed_id_ = new ::std::string;
  }
  return signed_id_;
}

// optional string parent_id = 13;
inline bool Message::has_parent_id() const {
  return _has_bit(3);
}
inline void Message::clear_parent_id() {
  if (parent_id_ != &_default_parent_id_) {
    parent_id_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Message::parent_id() const {
  return *parent_id_;
}
inline void Message::set_parent_id(const ::std::string& value) {
  _set_bit(3);
  if (parent_id_ == &_default_parent_id_) {
    parent_id_ = new ::std::string;
  }
  parent_id_->assign(value);
}
inline void Message::set_parent_id(const char* value) {
  _set_bit(3);
  if (parent_id_ == &_default_parent_id_) {
    parent_id_ = new ::std::string;
  }
  parent_id_->assign(value);
}
inline void Message::set_parent_id(const char* value, size_t size) {
  _set_bit(3);
  if (parent_id_ == &_default_parent_id_) {
    parent_id_ = new ::std::string;
  }
  parent_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_parent_id() {
  _set_bit(3);
  if (parent_id_ == &_default_parent_id_) {
    parent_id_ = new ::std::string;
  }
  return parent_id_;
}

// optional string source = 4;
inline bool Message::has_source() const {
  return _has_bit(4);
}
inline void Message::clear_source() {
  if (source_ != &_default_source_) {
    source_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Message::source() const {
  return *source_;
}
inline void Message::set_source(const ::std::string& value) {
  _set_bit(4);
  if (source_ == &_default_source_) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void Message::set_source(const char* value) {
  _set_bit(4);
  if (source_ == &_default_source_) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void Message::set_source(const char* value, size_t size) {
  _set_bit(4);
  if (source_ == &_default_source_) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_source() {
  _set_bit(4);
  if (source_ == &_default_source_) {
    source_ = new ::std::string;
  }
  return source_;
}

// optional string destination = 5;
inline bool Message::has_destination() const {
  return _has_bit(5);
}
inline void Message::clear_destination() {
  if (destination_ != &_default_destination_) {
    destination_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Message::destination() const {
  return *destination_;
}
inline void Message::set_destination(const ::std::string& value) {
  _set_bit(5);
  if (destination_ == &_default_destination_) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Message::set_destination(const char* value) {
  _set_bit(5);
  if (destination_ == &_default_destination_) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Message::set_destination(const char* value, size_t size) {
  _set_bit(5);
  if (destination_ == &_default_destination_) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_destination() {
  _set_bit(5);
  if (destination_ == &_default_destination_) {
    destination_ = new ::std::string;
  }
  return destination_;
}

// optional uint64 timestamp = 6;
inline bool Message::has_timestamp() const {
  return _has_bit(6);
}
inline void Message::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  _clear_bit(6);
}
inline ::google::protobuf::uint64 Message::timestamp() const {
  return timestamp_;
}
inline void Message::set_timestamp(::google::protobuf::uint64 value) {
  _set_bit(6);
  timestamp_ = value;
}

// optional uint64 expires = 7;
inline bool Message::has_expires() const {
  return _has_bit(7);
}
inline void Message::clear_expires() {
  expires_ = GOOGLE_ULONGLONG(0);
  _clear_bit(7);
}
inline ::google::protobuf::uint64 Message::expires() const {
  return expires_;
}
inline void Message::set_expires(::google::protobuf::uint64 value) {
  _set_bit(7);
  expires_ = value;
}

// optional bool is_success = 8;
inline bool Message::has_is_success() const {
  return _has_bit(8);
}
inline void Message::clear_is_success() {
  is_success_ = false;
  _clear_bit(8);
}
inline bool Message::is_success() const {
  return is_success_;
}
inline void Message::set_is_success(bool value) {
  _set_bit(8);
  is_success_ = value;
}

// optional string error = 9;
inline bool Message::has_error() const {
  return _has_bit(9);
}
inline void Message::clear_error() {
  if (error_ != &_default_error_) {
    error_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& Message::error() const {
  return *error_;
}
inline void Message::set_error(const ::std::string& value) {
  _set_bit(9);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void Message::set_error(const char* value) {
  _set_bit(9);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void Message::set_error(const char* value, size_t size) {
  _set_bit(9);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_error() {
  _set_bit(9);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  return error_;
}

// optional bool is_broadcast = 10;
inline bool Message::has_is_broadcast() const {
  return _has_bit(10);
}
inline void Message::clear_is_broadcast() {
  is_broadcast_ = false;
  _clear_bit(10);
}
inline bool Message::is_broadcast() const {
  return is_broadcast_;
}
inline void Message::set_is_broadcast(bool value) {
  _set_bit(10);
  is_broadcast_ = value;
}

// optional bool is_ack = 11;
inline bool Message::has_is_ack() const {
  return _has_bit(11);
}
inline void Message::clear_is_ack() {
  is_ack_ = false;
  _clear_bit(11);
}
inline bool Message::is_ack() const {
  return is_ack_;
}
inline void Message::set_is_ack(bool value) {
  _set_bit(11);
  is_ack_ = value;
}

// optional string session_token = 12;
inline bool Message::has_session_token() const {
  return _has_bit(12);
}
inline void Message::clear_session_token() {
  if (session_token_ != &_default_session_token_) {
    session_token_->clear();
  }
  _clear_bit(12);
}
inline const ::std::string& Message::session_token() const {
  return *session_token_;
}
inline void Message::set_session_token(const ::std::string& value) {
  _set_bit(12);
  if (session_token_ == &_default_session_token_) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(value);
}
inline void Message::set_session_token(const char* value) {
  _set_bit(12);
  if (session_token_ == &_default_session_token_) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(value);
}
inline void Message::set_session_token(const char* value, size_t size) {
  _set_bit(12);
  if (session_token_ == &_default_session_token_) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_session_token() {
  _set_bit(12);
  if (session_token_ == &_default_session_token_) {
    session_token_ = new ::std::string;
  }
  return session_token_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace grids

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2eproto__INCLUDED
