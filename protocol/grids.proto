// This is the top-level Google ProtocolBuffer definitions for GRIDS message passing.

package grids;

// base event class. most messages are based off of this format
message Message {
    required string event             = 1;  // event name, e.g. "Authentication.Login"
    required string id                = 2;  // message UUID
    optional string signed_id         = 3;  // cryptographically signed id. should be signed by sender's pubkey
    optional string parent_id         = 13; // UUID of parent message, if this is a response

    optional string source            = 4;  // pubkey of sender
    optional string destination       = 5;  // pubkey of recipient

    optional uint64 timestamp         = 6;  // unix timestamp of when this message was created
    optional uint64 expires           = 7;  // unix timestamp of when this message is no longer valid/useful

    optional bool is_success          = 8;
    optional string error             = 9;

    optional bool is_broadcast        = 10; // is this a broadcast message?
    optional bool is_ack              = 11; // is this a acknowledgment?

    optional string session_token     = 12;

    extensions 1000 to 18999;   // extensions must use these tag ids
}

package grids.message;

// encrypted connection established
message Encrypted {
    required Message base = 1;
}

// unencrypted connection established
message Unencrypted {
    required Message base = 1;
}

// test message
message Echo {
    required Message base = 1;
    optional string echo_string = 2;
}

// connection established
message Connected {
    required Message base = 1;
    optional string peer_name = 2;
}

package grids.message.authentication;

message Login {
    required Message base = 1;
}

package grids.message.node;

// node <--> node login
message Login {
    required Message base = 1;
    required string node_private_key = 2;
}

package grids.message.OTR;

// request to do OTR socialist millionaire protocol
message SMPRequest {
    required Message base = 1;
    optional string peer_name = 2;
    required string question = 3;
}

package grids.message.services;

message List {
    required Message base = 1;

    repeated string services = 2;
}

package grids.message.storage;

message List {
    required Message base = 1;

    repeated string keys = 2;
}

message Put {
    required Message base = 1;

    required string key = 2;
    optional bytes value = 3;
}

message Delete {
    required Message base = 1;

    required string key = 2;
}

message Get {
    required Message base = 1;

    required string key = 2;
    optional bytes value = 3;
}

message Empty {
    required Message base = 1;
}

package grids.message.error.protocol;

message UnsupportedSerializer {
    required Message base = 1;
    optional string serializer_method = 2;
}

message Unauthorized {
    required Message base = 1;
    optional string message = 2;
}

message IncompatibleVersion {
    required Message base = 1;
    optional string min_version = 2;
}

message UnknownError {
    required Message base = 1;
    optional string message = 2;
}

message UnknownStatus {
    required Message base = 1;
    optional string status = 2;
}

message InvalidSerializer {
    required Message base = 1;
}
