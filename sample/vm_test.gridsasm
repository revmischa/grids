.text
        
beginning:
  li $t0, 0x12345678
  addi $t1, $t0, 1
  addi $t1, $t1, -4
  addiu $a0, $zero, 5
  addiu $a1, $a0, 2
  addi $a2, $a1, -1
  sll $at, $a2, 3
  srl $v0, $at, 1
  xor $a0, $a0, $a0
  addiu $a0, $a0, 0xFFFFFFFE
  xori $a0, $a0, 1
  andi $a1, $a0, 0x7FFFFFFF
  li $v0, teststring
  lb $t0, 1($v0)
  lb $t0, 8($v0)
  andi $t1, $t0, 0b00111110
  li $t2, 0xFFFFFFFF
  andi $t3, $t2, 0b00000001

  li $t2, 0b10110101
  li $t1, 0b00101001
  and $t0, $t2, $t1

  ; test memory store/retrieve
    ; bytes
    la $t0, memtest1
    li $t1, 0x65
    sb $t1, 2($t0)
    li $t1, 0x66
    sb $t1, 3($t0)

    ; halfwords
    la $t0, memtest2
    lh $t1, 2($t0)
    lh $t3, ($t0)
    addi $t0, $t0, 2
    lh $t2, -2($t0)
    lh $t2, 0($t0)
    

  jreli 3   ; goto a
  nop      ; b
  j testbranching ; goto branch tests
  jreli -2  ; a, goto b

;;;;;;;; branch testing
testbranching:

t1:
  li $t1, 0xf3d8
  li $t2, 0xf3d8
  beq $t1, $t2, good1
  jreli 2

good1: j t2

t2:
  li $t2, 0xf3d7
  bne $t1, $t2, good2
  jreli 2
good2: j t3

t3:
  li $t0, -1
  bgez $t0, end
  nop

t4:
  bgez $t2, t5
  nop

t5:
  bgezal $t2, tsub
  j t6
tsub:
  jr $ra

t6:
  xor $t0, $t0, $t0
  bltz $t0, end

t7:
  addi $t0, $t0, -1
  bltz $t0, t8
  nop

t8:
 addi $t0, $t0, 1
 blez $t0, br_done
 nop

br_done:
;;;;;;;;;

  jal testjal
  nop

  ; test subu
  li $t4, 0xFFFFFFFF
  or $t1, $zero, $t4
  li $t3, 1
  subu $t2, $t1, $t3


  j end

;;;;;;;;;;;;;;;;
end:
  j beginning

testjal:
  jr $ra


.data
        
 teststring:
  .dz "cody sux!"

 memtest1:
  .ds "abdc"

 memtest2:
  .dl 0x00FF1234

